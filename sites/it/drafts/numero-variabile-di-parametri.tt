=title Numero variabile di parametri nelle subroutine Perl
=timestamp 2013-28-06T12:50:56
=indexes sub, @_
=status draft
=author szabgab
=archive 1
=comments 1
=social 1

=abstract start

Nonostante Perl non fornisca alcuna facilitazione per la dichiarazione dei parametri di una subroutine, è molto facile passare un numero indefinito di parametri ad una funzione.

Questo banalizza la scrittura di funzioni come <hl>sum</h1>.

=abstract end

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use 5.010;

say sum(3, 7, 11, 21);

my @values = (1, 2, 3)
say sum(@values);

sub sum {
    my $sum = 0;
    foreach my $v (@_) {
        $sum += $v;
    }
    return $sum;
}
</code>

In questo esempio, prima vengono passati 4 numeri alla subroutine <hl>sum</hl> e, nella seconda chiamata, viene passato un array di tre elementi (numeri).
La subroutine riceve i parametri nella variabile standard <hl>@_</hl>. 
In questo caso i valori dei parametri non vengono copiati in variabili locali (alla subroutine) dato che funzione è veramente semplice. 
Si itera sulle variabili utilizzando un ciclo <hl>foreach</hl> sommando ogni valore nella variabile $sum

Il valore della variabile <hl>$sum</hl> sarà restituita al chiamante.

<code lang="perl">
sub sum {
   my @values = @_;
   ...
</code>

<h2>Array privati</h2>
E' possibile copiare il contenuto di <hl>@_</hl> in una variabile privata dichiarata all'interno di una subroutine, ma in questo esempio non era necessario.

<h2>Passare più di un array</h2>
Sfortunatamente, se volessi passare due vettori ad una funzione come nell'esempio qui sotto, avresti dei problemi.

<code lang="perl">
my @good = ('Yoda', 'Luke', 'Leia')
my @evil = ('Darth Vader', Emperor)
print award(@good, @evil), "\n";
</code>

La subroutine vedrà tutti i valori ('Yoda', 'Luke', 'Leia', 'Darth Vader', Emperor) nell'array <h1>@_</h1> ma non esiste alcun modo semplice per definire quale valore arriva dal primo array e quale dal secondo.
Al fine di risolvere questo "dilemma" avremo la necessità di approfondire le references. 

Per i sottoscrittori di <a href="/pro">Perl Maven Pro</a> è disponibile  un <a href="/pro/passing-two-arrays-to-a-function">articolo</a> che spiega come passare due array ad una funzione.
